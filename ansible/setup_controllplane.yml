---
- name: Install Ingress Controller
  hosts: controlplane
  become: yes
  tasks:
    - name: Instala ingress de nginx  ingress controller
      shell: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.11.2/deploy/static/provider/baremetal/deploy.yaml
      retries: 5
      delay: 5

    - name: Anotation for ingress controller
      shell: kubectl -n ingress-nginx annotate ingressclasses nginx ingressclass.kubernetes.io/is-default-class="true"
      retries: 5
      delay: 5
    - name: Expose ingress Controller NodePot
      shell: |
        kubectl patch svc ingress-nginx-controller -n ingress-nginx -p '{"spec": {"type": "NodePort", "ports": [{"port": 80, "targetPort": 80, "nodePort": 32766}]}}'
      retries: 5
      delay: 10 

    - name: Debug Nodeport of nginx ingress controller
      shell: kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.spec.ports[?(@.port==80)].nodePort}'
      register: nginx_svc
      retries: 5
      delay: 5
    
    - name: Debug Nodeport of nginx ingress controller
      debug:
        msg: "NodePort of nginx ingress controller is {{ nginx_svc.stdout }}"

- name: Install ArgoCD control
  hosts: controlplane
  become: yes
  tasks:
    
    - name: Verify Kubernetes cluster accessibility
      shell: kubectl cluster-info
      register: cluster_info
      retries: 5
      delay: 10
      until: cluster_info is succeeded

    - name: Create namespace for ArgoCD
      shell: kubectl create namespace argocd

    - name: Apply manifest of ArgoCD
      shell: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      retries: 8
      delay: 10

    - name: Wait for ArgoCD CRDs to be created
      shell: kubectl get crds | grep argoproj.io
      register: crds_check
      retries: 10
      delay: 10
      until: crds_check.stdout.find('applications.argoproj.io') != -1
    
    - name: Expose ArgoCD service on NodePort
      shell: |
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort", "ports": [{"port": 80, "targetPort": 8080, "nodePort": 30080}]}}'
      retries: 5
      delay: 10

    - name: Get NodePort of ArgoCD service
      shell: kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[?(@.port==80)].nodePort}'
      register: argocd_nodeport
      retries: 5
      delay: 5

    - name: Debug ArgoCD NodePort
      debug:
        msg: "ArgoCD NodePort is {{ argocd_nodeport.stdout }}"
    
    - name: Test Apply crd from gist
      shell: kubectl apply -f https://gist.githubusercontent.com/SergioAnastacio/0ae57760fb9e3b3312f6a72fb3eeebaf/raw/daeab19619deb78e995126a55ca6529d9ba1a723/test.yaml
    




    