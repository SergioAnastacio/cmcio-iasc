---
- name: Install Ingress Controller
  hosts: controlplane
  become: yes
  tasks:
    - name: Set nginx ingress class as default
      k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: IngressClass
          metadata:
            name: nginx
            annotations:
              ingressclass.kubernetes.io/is-default-class: "true"
      retries: 5
      delay: 10

    - name: Expose ingress Controller NodePort
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: ingress-nginx-controller
            namespace: ingress-nginx
          spec:
            type: NodePort
            ports:
              - port: 80
                targetPort: 80
                nodePort: 32766
      retries: 5
      delay: 10

    - name: Debug NodePort of nginx ingress controller
      shell: kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.spec.ports[?(@.port==80)].nodePort}'
      register: nginx_svc
      retries: 5
      delay: 5

    - name: Debug NodePort of nginx ingress controller
      debug:
        msg: "NodePort of nginx ingress controller is {{ nginx_svc.stdout }}"

- name: Install ArgoCD control
  hosts: controlplane
  become: yes
  tasks:
    - name: Verify Kubernetes cluster accessibility
      shell: kubectl cluster-info
      register: cluster_info
      retries: 5
      delay: 10
      until: cluster_info is succeeded

    - name: Create namespace for ArgoCD
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: argocd

    - name: Apply manifest of ArgoCD
      k8s:
        state: present
        src: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        namespace: argocd
      retries: 8
      delay: 10

    - name: Wait for ArgoCD CRDs to be created
      shell: kubectl get crds | grep argoproj.io
      register: crds_check
      retries: 10
      delay: 10
      until: crds_check.stdout.find('applications.argoproj.io') != -1

    - name: Expose ArgoCD service on NodePort
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: argocd-server
            namespace: argocd
          spec:
            type: NodePort
            ports:
              - port: 80
                targetPort: 8080
                nodePort: 30080
      retries: 5
      delay: 10

    - name: Get NodePort of ArgoCD service
      shell: kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[?(@.port==80)].nodePort}'
      register: argocd_nodeport
      retries: 5
      delay: 5

    - name: Debug ArgoCD NodePort
      debug:
        msg: "ArgoCD NodePort is {{ argocd_nodeport.stdout }}"